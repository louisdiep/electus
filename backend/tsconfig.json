{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "ES2020",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "libReplacement": true,                           /* Enable lib replacement. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    "baseUrl": "./",                                     /* Specify the base directory to resolve non-relative module names. */
    "paths": {
      "shared/*": ["../../shared/*"]
    },                                                   /* Specify a set of entries that re-map imports to additional lookup locations. */
    "outDir": "./dist",                                  /* Specify an output folder for all emitted files. */
    "rootDir": "../",                                  /* Specify the root folder within your source files. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "outFile": "./",                                  /* Bundle all outputs into one JS file. If 'declaration' is true, also bundles .d.ts files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "importHelpers": true,                            /* Import helper functions from tslib instead of duplicating them. */
    // "downlevelIteration": true,                       /* Emit more compliant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify root path for debuggers to find the source code. */
    // "mapRoot": "",                                    /* Location for debugger to locate map files. */
    // "inlineSources": true,                            /* Include source code in sourcemaps. */
    // "emitBOM": true,                                  /* Emit a UTF-8 BOM at the start of output files. */
    // "newLine": "crlf",                                /* Set newline character for emitted files. */
    // "stripInternal": true,                            /* Do not emit declarations with '@internal'. */
    // "noEmitHelpers": true,                            /* Disable custom helper function emission. */
    // "noEmitOnError": true,                            /* Don't emit if there are any type errors. */
    // "preserveConstEnums": true,                       /* Do not erase const enums. */
    // "declarationDir": "./",                           /* Output directory for declaration files. */

    /* Interop Constraints */
    "esModuleInterop": true,                             /* Emit extra JS for better CommonJS interop. */
    "forceConsistentCasingInFileNames": true,            /* Ensure imports match exact casing. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Error on expressions with implicit 'any'. */
    // "strictNullChecks": true,                         /* Check for null and undefined. */
    // "strictFunctionTypes": true,                      /* Ensure functions match in parameters and return type. */
    // "strictBindCallApply": true,                      /* Check that bind/call/apply match target function. */
    // "strictPropertyInitialization": true,             /* Check class properties are set in constructor. */
    // "strictBuiltinIteratorReturn": true,              /* Iterator return types are 'undefined' instead of 'any'. */
    // "noImplicitThis": true,                           /* Error when 'this' has type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch variables to 'unknown'. */
    // "alwaysStrict": true,                             /* Emit 'use strict'. */
    // "noUnusedLocals": true,                           /* Warn on unused variables. */
    // "noUnusedParameters": true,                       /* Warn on unused function parameters. */
    // "exactOptionalPropertyTypes": true,               /* Treat optional props as written, not with 'undefined'. */
    // "noImplicitReturns": true,                        /* Error if not all code paths return a value. */
    // "noFallthroughCasesInSwitch": true,               /* Warn if fallthrough occurs in switch cases. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to all indexed accesses. */
    // "noImplicitOverride": true,                       /* Require 'override' modifier on subclass overrides. */
    // "noPropertyAccessFromIndexSignature": true,       /* Require use of index accessors. */
    // "allowUnusedLabels": true,                        /* Allow unused labels. */
    // "allowUnreachableCode": true,                     /* Allow unreachable code. */

    /* Completeness */
    "skipLibCheck": true                                 /* Don't type check declaration files. */
  },
  "include": ["src", "tests"],
  "exclude": ["node_modules"]
}
